#!/usr/bin/env perl

# NOTE:
#
# Must remove double-quotes from data before reporting and exporting.
# They aren't escaped when saving the report as CSV.  The Text::CSV
# module doesn't seem to handle them well.

use warnings;
use strict;

use Text::CSV;
use Date::Parse;
use POSIX qw(strftime);

use DumpTransaction qw(
	delete_unused_fields delete_used_fields dump_transaction
);

my $csv = Text::CSV->new() or die Text::CSV->error_diag;

# It may become useful to process postings differently based on
# each posting's type.  This table maps types to processors.

my %posting_processors = (
	'Bill Pmt -CCard'    => \&process_all_others,
	'Bill Pmt -Check'    => \&process_all_others,
	'Bill'               => \&process_all_others,
	'Check'              => \&process_all_others,
	'Credit Card Charge' => \&process_all_others,
	'Credit Card Credit' => \&process_all_others,
	'Credit'             => \&process_all_others,
	'Deposit'            => \&process_all_others,
	'Payment'            => \&process_all_others,
	'Invoice'            => \&process_invoice,
);

#$_ = \&dump_transaction foreach values %posting_processors;

# Load chart of accounts.
# QuickBooks exports postings with short names.
# This will map the short names to full names and account types.
# An error will be thrown on the occurrence of duplicate short names.

my %accounts;
{
	my $accounts_file = "accounts.csv";

	open my $fh, '<', $accounts_file or die "can't open $accounts_file: $!";

	$csv->parse(scalar <$fh>);
	my @column_names = $csv->fields();

	while (<$fh>) {
		$csv->parse($_);
		my @column_values = $csv->fields();

		my %account;
		@account{@column_names} = @column_values;

		my $short_account = $account{'Account'};
		$short_account =~ s/^.*://;

		if (exists $accounts{$short_account}) {
			die(
				"Short account $short_account refers to at least two long accounts:\n",
				"  $accounts{$short_account}{Account}\n",
				"  $account{Account}\n",
			);
		}

		$accounts{$short_account} = \%account;
	}
}

# Collect postings into transactions, then process each one.

{
	my $postings_file = "all-txns.csv";

	open my $fh, '<', $postings_file or die "can't open $postings_file: $!";

	$csv->parse(scalar <$fh>);
	my @column_names = $csv->fields();

	my @pending_transaction;

	while (<$fh>) {
		$csv->parse($_);
		my @column_values = $csv->fields();

		my %posting;
		@posting{@column_names} = @column_values;

		# Includes blank lines, for some reason.
		my $posting_number = $posting{'Trans #'};
		next unless length $posting_number;
		next if $posting_number eq 'Total';

		if (@pending_transaction) {
			if ($posting_number != $pending_transaction[0]{'Trans #'}) {
				process_pending_transaction(\@pending_transaction);
			}
		}

		push @pending_transaction, \%posting;
	}

	# One last one may have been accumulated without being processed.
	process_pending_transaction(\@pending_transaction) if @pending_transaction;
}

sub print_payee_line {
	my (
		$transaction_type, $transaction_date, $transaction_memo, $any_posting,
		$transaction
	) = @_;

	my $payee_name = $any_posting->{'Source Name'};
	delete_used_fields($transaction, 'Source Name');

	if (is_blank($payee_name)) {
		if (defined $transaction_memo) {
			$payee_name = $transaction_memo;
			$transaction_memo = undef;
		}
		else {
			$payee_name = 'FIXME';
		}
	}

	print $transaction_date;

	my $all_cleared = is_consistent($transaction, 'Clr');
	if ($all_cleared) {
		my $cleared = $any_posting->{'Clr'};
		print " *" unless is_blank($cleared);
		delete_used_fields($transaction, 'Clr', 'Paid');
	}
	else {
		my $all_pending = is_consistent($transaction, 'Paid');
		if ($all_pending) {
			my $pending = $any_posting->{'Paid'};
			print " !" unless is_blank($pending);
			delete_used_fields($transaction, 'Paid');
		}
	}

	print_num_if_available($any_posting, $transaction);

	print " $payee_name\n";

	if (defined $transaction_memo) {
		print "  ; $transaction_memo\n";

		delete_matching($transaction, 'Memo', $transaction_memo);
	}

	if (is_consistent($transaction, 'Billing Status')) {
		print_billing_status_line($any_posting);
		delete_used_fields($transaction, 'Billing Status');
	}

	if (is_consistent($transaction, 'Due Date')) {
		my $due_date = $any_posting->{'Due Date'};
		unless (is_blank($due_date)) {
			print "  ; Due: $due_date\n";
		}
		delete_used_fields($transaction, 'Due Date');
	}
}

sub calc_transaction_memo {
	my ($any_posting, $transaction) = @_;

	return unless is_consistent($transaction, 'Memo');

	my $memo = $any_posting->{'Memo'};
	delete_used_fields($transaction, 'Memo');

	return if is_blank($memo);
	return $memo;
}


sub print_memo {
	my ($posting) = @_;

	my %seen;

	my @memo = (
		grep { !is_blank($_) && !$seen{$_}++ }
		$posting->{'Name'},
		$posting->{'Memo'},
	);

	return unless @memo;

	print "  ; ", join( " / ", @memo);
}


###

# QuickBooks reports tend to be in the form MM/DD/YY.
# Convert them to YYYY-MM-DD.

sub fix_date {
	strftime("%F", localtime str2time($_[0]));
}

sub print_billing_status_line {
	my $billing_status = $_[0]{'Billing Status'};
	return if is_blank($billing_status);
	$billing_status =~ s/\s+(\S)/\U$1/g;
	print "  ; :$billing_status:\n";
}

# Default processing for all other transaction types.

sub process_pending_transaction {
	my ($pending_transaction) = @_;

	all_must_match(
		$pending_transaction,
		'Trans #', 'Type', 'Date', 'Entered/Last Modified', 'Source Name',
	);

	delete_unused_fields($pending_transaction);

	my $any_posting    = $pending_transaction->[0];
	my $posting_number = $any_posting->{'Trans #'};

	my $transaction_type = $any_posting->{'Type'};
	my $posting_processor = $posting_processors{$transaction_type};
	my $transaction_date = fix_date($any_posting->{'Date'});

	$posting_processor->(
		$transaction_type,
		$posting_number,
		$transaction_date,
		$any_posting,
		$pending_transaction,
	);

	# Verify that all parts of the input transaction were used.

	delete_used_fields( $pending_transaction, 'Trans #', 'Type', 'Date' );

	my %unused_fields;
	foreach my $posting (@$pending_transaction) {
		foreach my $field (keys %$posting) {
			++$unused_fields{$field};
		}
	}

	if (scalar keys %unused_fields) {
		warn(
			"$transaction_type $posting_number didn't use all the fields: ",
			join(" ", map { "($_)" } sort keys %unused_fields),
			"\n"
		);
	}

	# Clear out the pending transaction buffer for the next set of
	# postings.
	@$pending_transaction = ();
}


sub process_all_others {
	my (
		$transaction_type, $posting_number, $transaction_date, $any_posting,
		$transaction, $used_fields
	) = @_;

	my $transaction_memo = calc_transaction_memo($any_posting, $transaction);

	print_payee_line(
		$transaction_type, $transaction_date, $transaction_memo, $any_posting,
		$transaction, $used_fields
	);

	foreach (@$transaction) {
		my $short_account = $_->{'Account'};
		my $long_account  = $accounts{$short_account}{'Account'};
		my $account_type  = $accounts{$short_account}{'Type'};

		print "  ";

		if (is_blank($_->{'Clr'})) {
			print "! " unless is_blank($_->{'Paid'});
		}
		else {
			print "* ";
		}

		printf "%s  \$%.2f", $long_account, $_->{'Amount'} || 0;

		print_memo($_) unless defined $transaction_memo;

		print "\n";

		print_billing_status_line($_);

		my @number = (
			grep { !is_blank($_) }
			$_->{'Pay Meth'},
			$_->{'Num'},
		);

		if (@number) {
			print "  ; Number: @number\n";
		}
	}

	delete_used_fields(
		$transaction,
		'Account', 'Type', 'Amount', 'Clr', 'Paid', 'Memo', 'Name',
		'Billing Status', 'Num', 'Pay Meth'
	);
}

sub process_invoice {
	my (
		$transaction_type, $posting_number, $transaction_date, $any_posting,
		$transaction
	) = @_;

	my $transaction_memo = calc_transaction_memo($any_posting, $transaction);

	print_payee_line(
		$transaction_type, $transaction_date, $transaction_memo, $any_posting,
		$transaction
	);

	foreach (@$transaction) {
		my $short_account = $_->{'Account'};
		my $long_account  = $accounts{$short_account}{'Account'};
		my $account_type  = $accounts{$short_account}{'Type'};

		printf "  %s  \$%.2f", $long_account, $_->{'Amount'} || 0;

		# The most basic item memo comprises the QuickBooks item and its
		# description.

		my @item_memo = (
			grep { !is_blank($_) }
			(
				delete($_->{'Item'}),
				delete($_->{'Item Description'}),
			)
		);

		# Extended memos include QuickBooks memo text, unless the memo is
		# identical to the item description.  Identical descriptions and
		# memos happen a lot in my ledger.
		#
		# TODO - I have some paraphrased memos.  I think it would be
		# useful to determine whether all the words on the memo are in the
		# description, or vice versa, and to use the longer of the two.
		# This seems like it would eliminate a manual edit pass through
		# the invoice transactions.

		unless (defined $transaction_memo) {
			my $memo = delete $_->{'Memo'};
			if (@item_memo and not is_blank($memo)) {
				if ($memo ne $item_memo[-1]) {
					push @item_memo, $memo;
				}
			}
		}

		if (@item_memo) {
			print "  ; ", join(" / ", @item_memo);
		}

		print "\n";

		# Name is an expense account name.

		my $name = $_->{'Name'};
		unless (is_blank($name)) {
			my $long_name = $accounts{$name}{'Account'} // $name;

			printf "  %s  \$%.2f", $long_name, -($_->{'Amount'} || 0);

			if (@item_memo) {
				print "  ; ", join(" / ", @item_memo);
			}

			print "\n";

		}
	}

	delete_used_fields(
		$transaction,
		'Item', 'Item Description', 'Memo', 'Account', 'Type', 'Amount', 'Name',
		# These are useful, but I didn't use them, so I'm not porting them
		# across.
		'Qty', 'Sales Price', 'Aging', 'Ship Date',
	);
}


sub print_num_if_available {
	my ($any_posting, $transaction) = @_;

	return unless is_consistent($transaction, 'Num');

	my $transaction_number = $any_posting->{'Num'};
	my $type = $any_posting->{'Pay Meth'};
	delete_used_fields($transaction, 'Pay Meth', 'Num');

	return if is_blank($transaction_number);

	if (is_blank($type)) {
		$type = $any_posting->{'Type'};
	}

	print " ($type $transaction_number)";
}


sub is_blank {
	return 1 if not defined $_[0];
	return 1 if $_[0] =~ /^\s*$/;
	return 0;
}


# Validate input data.  Some fields must match between all
# postings that comprise a transaction.

sub all_must_match {
	my $pending_transaction = shift();

	FIELD: foreach my $field (@_) {
		my $value;
		TRANSACTION: foreach my $transaction (@$pending_transaction) {
			unless (defined $value) {
				$value = $transaction->{$field};
				next TRANSACTION;
			}
			unless ($transaction->{$field} eq $value) {
				die(
					"Transaction $pending_transaction->[0]{'Trans #'} error:\n",
					"  Field $field value changed.\n",
					"  Was: $value\n",
					"  Now: $transaction->{$field}\n",
				);
			}
		}
	}
}


sub delete_matching {
	my ($transaction, $field, $value) = @_;
	foreach (@$transaction) {
		next if is_blank($_->{$field}) or $_->{$field} ne $value;
		delete $_->{$field};
	}
}


# Determine if a particular field matches for all postings in a
# transaction.

sub is_consistent {
	my $pending_transaction = shift();

	FIELD: foreach my $field (@_) {
		my $value;
		TRANSACTION: foreach my $transaction (@$pending_transaction) {
			unless (defined $value) {
				$value = $transaction->{$field};
				next TRANSACTION;
			}

			return unless $transaction->{$field} eq $value;
		}
	}

	return 1;
}
